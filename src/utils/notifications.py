import os
import logging
from dotenv import load_dotenv
import requests
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        load_dotenv()
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID', '')
        
        self.is_configured = all([self.bot_token, self.chat_id])
        
        if not self.is_configured:
            logger.warning("Telegram notifier is not configured properly. Check environment variables.")
        else:
            logger.info("Telegram notifier initialized successfully")

    def send_low_balance_notification(self, balance: float, threshold: float = 1.0) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –≤ Telegram
        
        Args:
            balance: —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            threshold: –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        if not self.is_configured:
            logger.error("Cannot send Telegram notification: Bot not configured")
            return False
        
        if balance > threshold:
            return False
            
        message = (
            "‚ö†Ô∏è *–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –≤ AIChat –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏*\n\n"
            f"‚Ä¢ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* `{balance:.4f}`\n"
            f"‚Ä¢ *–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* `{threshold}`\n"
            f"‚Ä¢ *–°—Ç–∞—Ç—É—Å:* {'‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' if balance < 0.1 else '‚ö†Ô∏è –ù–ò–ó–ö–ò–ô'}\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ [OpenRouter](https://openrouter.ai/)\n\n"
            "_–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_"
        )
        
        return self._send_telegram_message(message)

    def send_startup_notification(self, version: str = "1.0.0") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_configured:
            return False
            
        message = (
            "üöÄ *AIChat –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ*\n\n"
            f"‚Ä¢ *–í–µ—Ä—Å–∏—è:* `{version}`\n"
            f"‚Ä¢ *–°—Ç–∞—Ç—É—Å:* ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
            "_–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞_"
        )
        
        return self._send_telegram_message(message)

    def send_error_notification(self, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.is_configured:
            return False
            
        message = (
            "‚ùå *–û—à–∏–±–∫–∞ –≤ AIChat –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏*\n\n"
            f"‚Ä¢ *–û—à–∏–±–∫–∞:* `{error_message[:100]}...`\n"
            f"‚Ä¢ *–°—Ç–∞—Ç—É—Å:* ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ\n\n"
            "_–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è_"
        )
        
        return self._send_telegram_message(message)

    def _send_telegram_message(self, message: str) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            logger.info(f"Telegram notification sent to chat {self.chat_id}")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to send Telegram notification: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending Telegram notification: {e}")
            return False

# –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
telegram_notifier = TelegramNotifier()

def check_and_notify_low_balance(balance: float, threshold: float = 1.0) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    
    Args:
        balance: —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        threshold: –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    return telegram_notifier.send_low_balance_notification(balance, threshold)

def notify_startup(version: str = "1.0.0") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return telegram_notifier.send_startup_notification(version)

def notify_error(error_message: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    return telegram_notifier.send_error_notification(error_message)